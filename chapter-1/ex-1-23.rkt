#lang racket

;; Процедура smallest-divisor в начале этого раздела проводит множество лишних проверок:
;; после того, как она проверяет, делится ли число на 2, нет никакого смысла проверять делимость
;; на другие четные числа. Таким образом, вместо последовательности 2, 3, 4, 5, 6 . . . , используемой
;; для test-divisor, было бы лучше использовать 2, 3, 5, 7, 9 . . . . Чтобы реализовать
;; такое улучшение, напишите процедуру next, которая имеет результатом 3, если получает 2 как
;; аргумент, а иначе возвращает свой аргумент плюс 2. Используйте (next test-divisor)
;; вместо (+ test-divisor 1) в smallest-divisor. Используя процедуру timed-prime-test
;; с модифицированной версией smallest-divisor, запустите тест для каждого из 12 простых чисел,
;; найденных в упражнении 1.22. Поскольку эта модификация снижает количество шагов проверки вдвое,
;; Вы должны ожидать двукратного ускорения проверки. Подтверждаются ли эти ожидания?
;; Если нет, то каково наблюдаемое соотношение скоростей двух алгоритмов, и как
;; Вы объясните то, что оно отличается от 2?

(require "smallest-divisor-improved.rkt")

(define (runtime) (current-inexact-milliseconds))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (cond ((prime? n)
         (report-prime (- (runtime) start-time)))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (search-for-primes from to)
  (cond ((<= from to)
         (if (odd? from)
             (begin (timed-prime-test from)
                    (search-for-primes (add1 from) to))
             (search-for-primes (add1 from) to)))))


;; (search-for-primes 1000 1020)
;; 1009 *** 0.0009765625
;; 1013 *** 0.002197265625
;; 1019 *** 0.001953125

;; (/ 0.0029296875 0.0009765625) ; 3
;; (/ 0.003173828125 0.002197265625) ; 1.44
;; (/ 0.003173828125 0.001953125) ; 1.625


;; (search-for-primes 10000 10200)
;; 10007 *** 0.005126953125
;; 10009 *** 0.0048828125
;; 10037 *** 0.0048828125

;; (/ 0.007080078125 0.005126953125) ; 1.38095
;; (/ 0.0078125 0.0048828125) ; 1.6
;; (/ 0.0078125 0.0048828125) ; 1.6


;; (search-for-primes 100000 100200)
;; 100003 *** 0.012939453125
;; 100019 *** 0.01318359375
;; 100043 *** 0.01416015625

;; (/ 0.024169921875 0.012939453125) ; 1.8679
;; (/ 0.02392578125 0.01318359375) ; 1.8148
;; (/ 0.02294921875 0.01416015625) ; 1.620


;; (search-for-primes 1000000 1000200)
;; 1000003 *** 0.039794921875
;; 1000033 *** 0.041015625
;; 1000037 *** 0.0400390625

;; (/ 0.06201171875 0.039794921875) ; 1.558
;; (/ 0.06201171875 0.041015625) ; 1.5119
;; (/ 0.06201171875 0.0400390625) ; 1.5487




